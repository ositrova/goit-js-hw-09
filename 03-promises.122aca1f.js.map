{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEE,MAAMC,EAAYC,SAASC,cAAc,UACnCC,EAAaF,SAASC,cAAc,kBACpCE,EAAYH,SAASC,cAAc,iBACnCG,EAAcJ,SAASC,cAAc,mBAEvCI,EAAW,CACfC,MAAO,EACPC,KAAM,EACNC,OAAQ,GAGJC,EAAmBC,IAAQL,EAASK,EAAEC,OAAOC,MAAQC,OAAOH,EAAEC,OAAOG,MAAM,EAEjF,SAASC,EAAcC,EAAUV,GAC/B,MAAMW,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQxB,EAAA2B,OAAOC,QAAQ,qBAAqBT,QAAeV,QAE3DgB,EAAOzB,EAAA2B,OAAOE,QAAQ,qBAAqBV,QAAeV,OAAW,GAEtEA,EAAO,G,CAIdJ,EAAWyB,iBAAiB,QAASlB,GAErCN,EAAUwB,iBAAiB,QAASlB,GAEpCL,EAAYuB,iBAAiB,QAASlB,GAEtCV,EAAU4B,iBAAiB,SAAUjB,IACnCA,EAAEkB,iBAEF,IAAK,IAAIC,EAAI,EAAGA,GAAKxB,EAASG,OAAQqB,GAAK,EACzCd,EAAcc,EAAGxB,EAASC,OACzBwB,MAAKhB,IAAA,IACLiB,OAAMC,IAAA,IAEP3B,EAASC,OAASD,EAASE,I","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n  const submitBtn = document.querySelector('button');\n  const delayInput = document.querySelector('[name=\"delay\"]');\n  const stepInput = document.querySelector('[name=\"step\"]');\n  const amountInput = document.querySelector('[name=\"amount\"]');\n\nconst formData = {\n  delay: 0,\n  step: 0,\n  amount: 0,\n}\n\nconst takingInputInfo = (e) => { formData[e.target.name] = Number(e.target.value); }\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(Notify.success(`Fulfilled promise ${position} in ${delay}ms`)) \n      } else {\n        reject(Notify.failure(`Fulfilled promise ${position} in ${delay}ms`)) \n      }\n    }, delay )\n  })\n}\n\ndelayInput.addEventListener('input', takingInputInfo);\n\nstepInput.addEventListener('input', takingInputInfo);\n\namountInput.addEventListener('input', takingInputInfo);\n\nsubmitBtn.addEventListener('click', (e) => {\n  e.preventDefault()\n\n  for (let i = 1; i <= formData.amount; i += 1) {\n    createPromise(i, formData.delay)\n    .then(value => {})\n    .catch(error => {}); \n  \n    formData.delay += formData.step;\n  }  \n})\n\n\n\n\n\n\n\n\n\n\n\n\n// HTML містить розмітку форми, в поля якої користувач буде вводити першу \n// затримку в мілісекундах, крок збільшення затримки для кожного промісу \n// після першого і кількість промісів, яку необхідно створити.\n\n// <form class=\"form\">\n//   <label>\n//     First delay (ms)\n//     <input type=\"number\" name=\"delay\" required />\n//   </label>\n//   <label>\n//     Delay step (ms)\n//     <input type=\"number\" name=\"step\" required />\n//   </label>\n//   <label>\n//     Amount\n//     <input type=\"number\" name=\"amount\" required />\n//   </label>\n//   <button type=\"submit\">Create promises</button>\n// </form>\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію \n// createPromise(position, delay) стільки разів, скільки ввели в поле amount. \n// Під час кожного виклику передай їй номер промісу (position), що створюється, \n// і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один \n// проміс, який виконується або відхиляється через delay часу. Значенням\n//  промісу повинен бути об'єкт, в якому будуть властивості position і delay \n//  зі значеннями однойменних параметрів. Використовуй початковий код функції\n//   для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// Бібліотека повідомлень​\n\n// УВАГА\n// Наступний функціонал не обов'язковий для здавання завдання, але буде хорошою\n//  додатковою практикою.\n// Для відображення повідомлень користувачеві, замість console.log(), використовуй \n// бібліотеку notiflix."],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$submitBtn","document","querySelector","$47d4ff9957288465$var$delayInput","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$amountInput","$47d4ff9957288465$var$formData","delay","step","amount","$47d4ff9957288465$var$takingInputInfo","e","target","name","Number","value","$47d4ff9957288465$var$createPromise","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","Notify","success","failure","addEventListener","preventDefault","i","then","catch","error"],"version":3,"file":"03-promises.122aca1f.js.map"}