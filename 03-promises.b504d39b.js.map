{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAoCA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA3CAQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAoBC,GAClBA,EAAEC,iBAEF,MACEZ,MAAOa,EACPC,KAAMC,EACNC,OAAQC,GACNN,EAAEO,cAAcC,SAEpB,IAAIC,EAAQC,OAAOR,EAAWS,OAC9B,MAAMR,EAAOO,OAAON,EAAUO,OACxBN,EAASK,OAAOJ,EAAYK,OAElC,IAAKF,GAASJ,GAAU,EAEtB,OADAL,EAAEO,cAAcK,QACT3B,EAAA4B,OAAOC,QAAQ,yBAGxB,IAAK,IAAIC,EAAM,EAAGA,GAAOV,EAAQU,GAAO,EACtC5B,EAAc4B,EAAKN,GAChBO,MAAK,EAAC5B,SAAEA,EAAQC,MAAEA,MACjBJ,EAAA4B,OAAOI,QAAQ,uBAAqB7B,QAAiBC,MAAU,IAEhE6B,OAAM,EAAC9B,SAAEA,EAAQC,MAAEA,MAClBJ,EAAA4B,OAAOM,QAAQ,sBAAoB/B,QAAiBC,MAAU,IAElEoB,GAASN,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onBtnClick);\n\nfunction onBtnClick(e) {\n  e.preventDefault();\n\n  const {\n    delay: delayInput,\n    step: stepInput,\n    amount: amountInput,\n  } = e.currentTarget.elements;\n\n  let delay = Number(delayInput.value);\n  const step = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n\n  if ((delay || amount) < 0) {\n    e.currentTarget.reset();\n    return Notify.warning('Write positive values');\n  }\n\n  for (let pos = 1; pos <= amount; pos += 1) {\n    createPromise(pos, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n\n\n\n\n\n\n\n\n\n\n\n// HTML містить розмітку форми, в поля якої користувач буде вводити першу \n// затримку в мілісекундах, крок збільшення затримки для кожного промісу \n// після першого і кількість промісів, яку необхідно створити.\n\n// <form class=\"form\">\n//   <label>\n//     First delay (ms)\n//     <input type=\"number\" name=\"delay\" required />\n//   </label>\n//   <label>\n//     Delay step (ms)\n//     <input type=\"number\" name=\"step\" required />\n//   </label>\n//   <label>\n//     Amount\n//     <input type=\"number\" name=\"amount\" required />\n//   </label>\n//   <button type=\"submit\">Create promises</button>\n// </form>\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію \n// createPromise(position, delay) стільки разів, скільки ввели в поле amount. \n// Під час кожного виклику передай їй номер промісу (position), що створюється, \n// і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один \n// проміс, який виконується або відхиляється через delay часу. Значенням\n//  промісу повинен бути об'єкт, в якому будуть властивості position і delay \n//  зі значеннями однойменних параметрів. Використовуй початковий код функції\n//   для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// Бібліотека повідомлень​\n\n// УВАГА\n// Наступний функціонал не обов'язковий для здавання завдання, але буде хорошою\n//  додатковою практикою.\n// Для відображення повідомлень користувачеві, замість console.log(), використовуй \n// бібліотеку notiflix."],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","e","preventDefault","delayInput","step","stepInput","amount","amountInput","currentTarget","elements","delay1","Number","value","reset","Notify","warning","pos","then","success","catch","failure"],"version":3,"file":"03-promises.b504d39b.js.map"}